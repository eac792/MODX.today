var fs = require("fs"),
    path = require("path"),
	nodesass = require('node-sass'),
	notify = require('osx-notifier'),
	autoprefixer = require('autoprefixer',{
        browsers: ['> 3%', 'last 2 versions', 'Firefox ESR', 'Opera 12.1', 'Explorer 9'],
        cascade: false
    }),
	color = require('cli-color'),
	UglifyJS = require("uglify-js");



module.exports = {
	// build css
	sass: function(params) {	

		var file = params.file;
		var outFile = params.outputDir + path.basename(file, path.extname(file)) + '.css';
		
	    nodesass.render({
		    file: file,
		    outFile: outFile,
		    
		    includePaths: [ 'assets/tpl/sources/', 'assets/tpl/sources/bower_components/' ],
		    
		    sourceMap: true,
		    outputStyle: params.outputStyle,
		    
		    success: function(result) {
	            
	            // run autoprefixer
	            result.css = autoprefixer.process(result.css, {});
	            
	            fs.writeFile(outFile, result.css, function(err) {
				    if(err) {
				        console.log(color.red('Error saving ' + outFile + ': ' + err));
				    } else {
				        // file saved
				        console.log(color.green('Rendered CSS for '+file + ' to ' +outFile));
				    }
				});
			},
			
		    error: function(error) {
		        console.log(color.red('ERROR found in ') + color.red.bold(path.basename(file)) + color.red(': '+error.message));
		        //console.log(error.code);
		        notify({
                  type: 'fail',
                  title: 'Error found (SASS)',
                  subtitle: 'in '+path.basename(file),
                  message: error.message,
                  group: 'build-all',
                });
		    }
	    });
	},
	
	
	// build js
	js: function(params) {
		
		var file = params.file;
		var outFile = params.outputDir + path.basename(file, path.extname(file)) + '.js';
		var importedFile = module.exports.importFile(file);
		
		try {	
    		var result = UglifyJS.minify(importedFile, {
    			fromString: true,
    			screw_ie8: true
    		});
        } catch(err) {
            console.log(color.red('UglifyJS Error: '+err.message+"\n"+'Line: '+err.line+' Col: '+err.col+' Pos: '+err.pos));
            notify({
              type: 'fail',
              title: 'Error found (JS)',
              subtitle: 'Line: '+err.line+' Col: '+err.col+' Pos: '+err.pos,
              message: err.message,
              group: 'build-all',
            });
        }
        
        var output = (typeof result != 'undefined') ? result.code : importedFile;
        
		fs.writeFile(outFile, output, function(err) {
		    if(err) {
		        console.log(color.red('Error saving ' + outFile + ': ' + err));
		    } else {
		        // file saved
		        console.log(color.green('Rendered JS for '+file + ' to ' +outFile));
		    }
		});
	},
	
	
	// helper function to import js files
	importFile: function(fileName, fileMap){

		// To Prevent Circular Imports
		fileMap = fileMap || {};

		// Determine Path for Importing dependent files
		var filePath = path.dirname(fileName),

			// Resolve to get the full path every time
			mapPath = path.resolve(fileName);

		// Add Error Handlers Later...
		if(
			// Check that File Exists
			!fs.existsSync(fileName) ||

			// Check it hasn't been imported yet
			fileMap[mapPath]
		){
    		console.log(color.red('Error: import file not found ('+fileName+')'));
    		notify({
              type: 'fail',
              title: 'Import Error',
              message: 'file not found ('+fileName+')',
              group: 'build-all',
            });
            return "";
        } else {
            console.log('Importing js file '+fileName);
        }

		// Mark as Read
		fileMap[mapPath] = 1;

		return	fs.readFileSync(fileName)
				.toString()
				.replace(
					// Regex to match import statements
					/^([ \t]*)(.*)import [\"\'](.+)(?:\.js)?[\"\'];(?![^\*]+\*\/)/gm,
					function(match, tabs, prefix, fileName){

						// Replace Import
						return tabs + module.exports.importFile(path.resolve(filePath, fileName+".js"), fileMap).replace(/\n/g, "\n"+tabs);
					}
				);
	}
}